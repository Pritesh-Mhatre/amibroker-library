/****************************************************************
*
* AutoTrader automated trading API functions.
* DO NOT MODIFY THIS FILE
* Version: 1.0
*
******************************************************************/

/* Import public amibroker libraries */

#include<misc-util.afl>
#include<text-util.afl>
#include<file-util.afl>
#include<conversion-util.afl>

/* Import AutoTrader specific amibroker libraries */

#include<autotrader-ipc.afl>
#include<autotrader-defaults.afl>


/*********************** CONSTANTS - START ***********************/

AT_COMMA = ",";

AT_PLACE_ORDER_CMD = "PLACE_ORDER";
AT_CANCEL_ORDER_CMD = "CANCEL_ORDER";
AT_MODIFY_ORDER_CMD = "MODIFY_ORDER";

AT_START_TIME_CHUNK = "globalStartTimeChunk";
AT_ORDER_SEQUENCE = "globalOrderSequence";
AT_INIT = "globalInit";

/*********************** CONSTANTS - END ***********************/


/*********************** PARAMETERS - START ***********************/

AT_PRICE_PRECISION = StrToNum(ParamList("Price precision, used for rounding price", "4|3|2|1|0"));

AT_DEBUG = ParamToggle("Print Additional Logs", "OFF|ON", 0);

/*********************** PARAMETERS - END ***********************/

/*
* Initialize static variable used for generating unique order number.
*/
if( Nz( StaticVarGet(AT_INIT) ) == 0 )
{
	StaticVarSet(AT_INIT, 1);
	
	// One time initialization	
	StaticVarSet( AT_ORDER_SEQUENCE, 1);
	
	timestampChunk = (Now(5) / 1000000) % 1000000;
	startTime = NumToStr(timestampChunk, 1.0, False);
	StaticVarSetText( AT_START_TIME_CHUNK, startTime);
}

/*
* Givens next global order number.
*/
function nextGlobalOrderNumber() {
	num = StaticVarGet( AT_ORDER_SEQUENCE );
	StaticVarSet( AT_ORDER_SEQUENCE, num + 1);
	return num;
}

/*
* Generates unique order id.
*/
function generateUniqueOrderId() {
	return StaticVarGetText(AT_START_TIME_CHUNK) + "-" + 
		convertIntegerToString(nextGlobalOrderNumber());
}

/*
* Converts order to easy to read text format.
*/
function orderString(variety, symbol, tradeType, orderType, quantity, price, triggerPrice, 
	target, stoploss, trailingStoploss) {
	conciseForm = symbol + "|" + tradeType + "|" + orderType + "|" + quantity + "@" + price;

	if(variety == AT_VARIETY_BO) {
		result = "Bracket Order [" + conciseForm + "|" + 
			"t=" + target + "|" + "sl=" + stoploss + "|" + "tr. sl=" + trailingStoploss + "]";
	} else if (variety == AT_VARIETY_CO) {
		result = "Cover Order [" + conciseForm + "|" + "trigger=" + triggerPrice +  "]";
	} else {
		result = "Regular Order [" + conciseForm + "]";
	}
	
	return result;
}

/*
* An advanced function to place orders.
*/
function placeOrderAdvanced(variety, account, exchange, symbol, 
	tradeType, orderType, productType, 
	quantity, price, triggerPrice,
	target, stoploss, trailingStoploss,
	disclosedQuantity, validity, amo,
	strategyId, comments) {
	
	orderStr = orderString(variety, symbol, tradeType, orderType, quantity, 
		price, triggerPrice, target, stoploss, trailingStoploss);
		
	if(AT_DEBUG) {
		_TRACE("Placing order: " + orderStr);
	}	

	// Generate unique order id
	orderId = generateUniqueOrderId();
	
	// Save order generation time
	publishTime = convertIntegerToString(convertDateTimeToMillisSinceEpoch(LastValue(DateTime())));
	
	// Convert data into text in order to write it to a CSV file
	
	priceStr = StrFormat("%.5f", prec(IIF( price < 0, 0, price ), AT_PRICE_PRECISION));
	triggerPriceStr = StrFormat("%.5f", prec(IIF( triggerPrice < 0, 0, triggerPrice ), AT_PRICE_PRECISION));
	targetStr = StrFormat("%.5f", prec(IIF( target < 0, 0, target ), AT_PRICE_PRECISION));
	stoplossStr = StrFormat("%.5f", prec(IIF( stoploss < 0, 0, stoploss ), AT_PRICE_PRECISION));
	trailingStoplossStr = StrFormat("%.5f", prec(IIF( trailingStoploss < 0, 0, trailingStoploss ), AT_PRICE_PRECISION));
	// Handling for a comma in comments
	commentsStr = StrReplace(comments, AT_COMMA, ";" );

	csv = AT_PLACE_ORDER_CMD 	+ AT_COMMA +
		orderId 									+ AT_COMMA +
		variety 									+ AT_COMMA +
		account 								+ AT_COMMA +
		exchange 								+ AT_COMMA +
		symbol 									+ AT_COMMA +
		tradeType 								+ AT_COMMA +
		orderType 								+ AT_COMMA +
		productType 							+ AT_COMMA +
		quantity 								+ AT_COMMA +
		priceStr 								+ AT_COMMA +
		triggerPriceStr 						+ AT_COMMA +
		targetStr 								+ AT_COMMA +
		stoplossStr 							+ AT_COMMA +
		trailingStoplossStr 				+ AT_COMMA +
		disclosedQuantity 					+ AT_COMMA +
		validity 									+ AT_COMMA +
		amo 										+ AT_COMMA +
		strategyId 							+ AT_COMMA +
		comments;

	if(AT_DEBUG) {
		_TRACE("Order csv data: " + csv);
	}	
	
	written = fileWriteLine(COMMANDS_FILE, csv);
	
	if(written) {
		_TRACE("Order placed: [" + orderStr + "], order id: " + orderId);
	} else {
		_TRACE("ERROR: Order placement failed: [" + orderStr + "]");
		orderId = "";
	}
	
	return orderId;
}

/*
* A function to place regular orders.
*/
function placeOrder(account, exchange, symbol, tradeType, orderType, productType, 
	quantity, price, triggerPrice) {

	return placeOrderAdvanced(defaultVariety(), account, exchange, symbol, 
		tradeType, orderType, productType, 
		quantity, price, triggerPrice,
		defaultTarget(), defaultStoploss(), defaultTrailingStoploss(),
		defaultDisclosedQuantity(), defaultValidity(), defaultAmo(),
		defaultStrategyId(), defaultComments());

}


/*
* A function to place bracket orders.
*/
function placeBracketOrder(account, exchange, symbol, tradeType, orderType, 
	quantity, price, triggerPrice, target, stoploss, trailingStoploss) {

	return placeOrderAdvanced(AT_VARIETY_BO, account, exchange, symbol, 
		tradeType, orderType, defaultProductType(), 
		quantity, price, triggerPrice,
		target, stoploss, trailingStoploss,
		defaultDisclosedQuantity(), defaultValidity(), defaultAmo(),
		defaultStrategyId(), defaultComments());

}


/*
* A function to place cover orders.
*/
function placeCoverOrder(account, exchange, symbol, tradeType, orderType, 
	quantity, price, triggerPrice) {

	return placeOrderAdvanced(AT_VARIETY_BO, account, exchange, symbol, 
		tradeType, orderType, defaultProductType(), 
		quantity, price, triggerPrice,
		defaultTarget(), defaultStoploss(), defaultTrailingStoploss(),
		defaultDisclosedQuantity(), defaultValidity(), defaultAmo(),
		defaultStrategyId(), defaultComments());

}