/******************************************************************************
*
* AutoTrader automated trading API functions.
* DO NOT MODIFY THIS FILE
* Version: 1.0
*
******************************************************************************/

/* Import public amibroker libraries */

#include<misc-util.afl>
#include<text-util.afl>
#include<file-util.afl>
#include<conversion-util.afl>

/* Import AutoTrader specific amibroker libraries */

#include<autotrader-ipc.afl>
#include<autotrader-defaults.afl>


/***************************** CONSTANTS - START *****************************/

AT_LAST_ORDER_TIME_KEY = "AT_LAST_ORDER_TIME";
AT_LAST_ORDER_TRADE_TYPE_KEY = "AT_LAST_ORDER_TRADE_TYPE";

AT_START_TIME_CHUNK = "globalStartTimeChunk";
AT_ORDER_SEQUENCE = "globalOrderSequence";
AT_INIT = "globalInit";

/****************************** CONSTANTS - END ******************************/


/***************************** PARAMETERS - START ****************************/

AT_PRICE_PRECISION = StrToNum(ParamList(
	"Price precision, used for rounding price", "4|3|2|1|0"));

AT_DEBUG = ParamToggle("Print Additional Logs", "OFF|ON", 0);

/*
* Used for avoiding repeat orders. Repeat orders are back to back buy or 
* sell orders. The system will not accept an order in this many seconds, 
* if an order for same stock, tradeType was sent earlier from the same chart.
* If you want to execute back to back order then you can set this 
* parameter to 0.
* If you want to avoid repeat orders generated due to duplicate signals 
* then set this parameter to a value higher than your candle interval.
* 
* Example: 
* 1. Assume AT_AVOID_REPEAT_ORDER_DELAY value is set for 120 seconds & your chart uses 1-minute (60 seconds) candle.
* 2. System receives a BUY order for SBIN at time 10:15:15.
* 3. System will place it.
* 4. After 15 seconds, system receives another BUY order for SBIN at time 10:15:30.
* 5. The system will NOT place this order, as the symbol & tradeType are same and the order came with 120 seconds of previous order.
*/
AT_AVOID_REPEAT_ORDER_DELAY = Param("Avoid repeat orders (in seconds)", 26000, 0, 26000, 5);

/***************************** PARAMETERS - END *****************************/

/*
* Initialize static variable used for generating unique order number.
*/
if( Nz( StaticVarGet(AT_INIT) ) == 0 )
{
	StaticVarSet(AT_INIT, 1);
	
	// One time initialization	
	StaticVarSet( AT_ORDER_SEQUENCE, 1);
	
	timestampChunk = (Now(5) / 1000000) % 1000000;
	startTime = NumToStr(timestampChunk, 1.0, False);
	StaticVarSetText( AT_START_TIME_CHUNK, startTime);
}

/*
* Givens next global order number.
*/
function nextGlobalOrderNumber() {
	num = StaticVarGet( AT_ORDER_SEQUENCE );
	StaticVarSet( AT_ORDER_SEQUENCE, num + 1);
	return num;
}

/*
* Generates unique order id.
*/
function generateUniqueOrderId() {
	return StaticVarGetText(AT_START_TIME_CHUNK) + "-" + 
		convertIntegerToString(nextGlobalOrderNumber());
}

/*
* Saves last order time, in a static variable.
*/
procedure saveLastOrderTime(orderTime) {
	amiStaticVarSet(AT_LAST_ORDER_TIME_KEY, orderTime);
}

/*
* Fetches the last order time (if available).
*/
function readLastOrderTime() {
	return amiStaticVarGet(AT_LAST_ORDER_TIME_KEY);	
}

/*
* Saves last order trade type, in a static variable.
*/
procedure saveLastOrderTradeType(tradeType) {
	amiStaticVarSetText(AT_LAST_ORDER_TRADE_TYPE_KEY, StrToUpper(tradeType));
}

/*
* Fetches the last order trade type (if available).
*/
function readLastOrderTradeType() {
	return amiStaticVarGetText(AT_LAST_ORDER_TRADE_TYPE_KEY);
}

/*
* Converts order to easy to read text format.
*/
function orderString(variety, symbol, tradeType, orderType, quantity, 
	price, triggerPrice, target, stoploss, trailingStoploss) {
	conciseForm = symbol + "|" + tradeType + "|" + orderType + "|" + 
		quantity + "@" + price;

	if(variety == AT_VARIETY_BO) {
		result = "Bracket Order [" + conciseForm + "|" + 
			"t=" + target + "|" + "sl=" + stoploss + "|" + 
			"tr. sl=" + trailingStoploss + "]";
	} else if (variety == AT_VARIETY_CO) {
		result = "Cover Order [" + conciseForm + "|" + "trigger=" + 
			triggerPrice +  "]";
	} else {
		result = "Regular Order [" + conciseForm + "]";
	}
	
	return result;
}

/*
* Checks whether we have a duplicate signal. This is done to overcome a limitation 
* in AmiBroker, which keeps on giving same signal for every tick 
* until the candle is complete.
*/
function isDuplicateSignal(tradeType) {
	duplicate = False;
	
	time = readLastOrderTime();
	lastTradeType = readLastOrderTradeType();
	
	if(time > 0) {
		difference = DateTimeDiff(Now(5), time);
		
		if(difference < AT_AVOID_REPEAT_ORDER_DELAY AND 
			lastTradeType == StrToUpper(tradeType)) {
		
			_TRACE("ERROR: Duplicate signal. Previous order = " 
				+ lastTradeType + ", Current order = " + tradeType);
			
			if(AT_DEBUG) {
				_TRACE("Last order time is = " + DateTimeToStr(time));
				_TRACE("Difference of [" + difference + 
					"] seconds is less than avoid duplicate order duration of ["
					+ AT_AVOID_REPEAT_ORDER_DELAY + "] seconds.");
			}
			
			duplicate = TRUE;
		}
	}
	
	return duplicate;
}

/*****************************************************************************/
/*********************** PLACE ORDER FUNCTIONS - START ***********************/
/*****************************************************************************/

/*
* An advanced function to place orders.
*/
function placeOrderAdvanced(variety, account, exchange, symbol, 
	tradeType, orderType, productType, 
	quantity, price, triggerPrice,
	target, stoploss, trailingStoploss,
	disclosedQuantity, validity, amo,
	strategyId, comments, validate) {

	// Initially order id is blank
	orderId = "";
	
	orderStr = orderString(variety, symbol, tradeType, orderType, quantity, 
		price, triggerPrice, target, stoploss, trailingStoploss);
		
	if(AT_DEBUG) {
		_TRACE("Placing order: " + orderStr);
	}	

	proceed = TRUE;
	if(validate) {
		// Perform validation
		
		// Perform duplicate signal check
		if(isDuplicateSignal(tradeType)) {
			_TRACE("Order failed validation: " + orderStr);
			proceed = False;
		}
	}

	if(proceed) {
	
		// Generate unique order id
		orderId = generateUniqueOrderId();
		
		// Save order generation time
		publishTime = convertIntegerToString(
			convertDateTimeToMillisSinceEpoch(LastValue(DateTime())));
		
		// Convert data into text in order to write it to a CSV file		
		priceStr = StrFormat("%.5f", prec(
			IIF( price < 0, 0, price ), AT_PRICE_PRECISION));
		triggerPriceStr = StrFormat("%.5f", prec(
			IIF( triggerPrice < 0, 0, triggerPrice ), AT_PRICE_PRECISION));
		targetStr = StrFormat("%.5f", prec(
			IIF( target < 0, 0, target ), AT_PRICE_PRECISION));
		stoplossStr = StrFormat("%.5f", prec(
			IIF( stoploss < 0, 0, stoploss ), AT_PRICE_PRECISION));
		trailingStoplossStr = StrFormat("%.5f", prec(
			IIF( trailingStoploss < 0, 0, trailingStoploss ), 
			AT_PRICE_PRECISION));
			
		// Handling for a comma in comments
		commentsStr = StrReplace(comments, AT_COMMA, ";" );

		csv = AT_PLACE_ORDER_CMD 	+ AT_COMMA +
			orderId 									+ AT_COMMA +
			variety 									+ AT_COMMA +
			account 								+ AT_COMMA +
			exchange 								+ AT_COMMA +
			symbol 									+ AT_COMMA +
			tradeType 								+ AT_COMMA +
			orderType 								+ AT_COMMA +
			productType 							+ AT_COMMA +
			quantity 								+ AT_COMMA +
			priceStr 								+ AT_COMMA +
			triggerPriceStr 						+ AT_COMMA +
			targetStr 								+ AT_COMMA +
			stoplossStr 							+ AT_COMMA +
			trailingStoplossStr 				+ AT_COMMA +
			disclosedQuantity 					+ AT_COMMA +
			validity 									+ AT_COMMA +
			amo 										+ AT_COMMA +
			strategyId 							+ AT_COMMA +
			comments;

		if(AT_DEBUG) {
			_TRACE("Order csv data: " + csv);
		}	
		
		written = fileWriteLine(COMMANDS_FILE, csv);
		
		if(written) {
			saveLastOrderTradeType(tradeType);
			saveLastOrderTime(Now(5));
			_TRACE("Order placed: [" + orderStr + "], order id: " + orderId);
		} else {
			_TRACE("ERROR: Order placement failed: [" + orderStr + "]");
			orderId = "";
		}
	}
	
	return orderId;
}

/*
* A function to place regular orders. Returns order id on successful 
* order placement; otherwise returns blank.
* 
* If a parameter is not applicable, then either pass blank (for text parameter) 
* or zero (for numeric parameter).
*/
function placeOrder(account, exchange, symbol, tradeType, orderType, 
	productType, quantity, price, triggerPrice, validate) {

	return placeOrderAdvanced(defaultVariety(), account, exchange, symbol, 
		tradeType, orderType, productType, 
		quantity, price, triggerPrice,
		defaultTarget(), defaultStoploss(), defaultTrailingStoploss(),
		defaultDisclosedQuantity(), defaultValidity(), defaultAmo(),
		defaultStrategyId(), defaultComments(), validate);

}

/*
* A function to place bracket orders.Returns order id on successful 
* order placement; otherwise returns blank.
* 
* If a parameter is not applicable, then either pass blank (for text parameter) 
* or zero (for numeric parameter).
*/
function placeBracketOrder(account, exchange, symbol, tradeType, orderType, 
	quantity, price, triggerPrice, target, stoploss, trailingStoploss, validate) {

	return placeOrderAdvanced(AT_VARIETY_BO, account, exchange, symbol, 
		tradeType, orderType, defaultProductType(), 
		quantity, price, triggerPrice,
		target, stoploss, trailingStoploss,
		defaultDisclosedQuantity(), defaultValidity(), defaultAmo(),
		defaultStrategyId(), defaultComments(), validate);

}

/*
* A function to place cover orders.Returns order id on successful 
* order placement; otherwise returns blank.
* 
* If a parameter is not applicable, then either pass blank (for text parameter) 
* or zero (for numeric parameter).
*/
function placeCoverOrder(account, exchange, symbol, tradeType, orderType, 
	quantity, price, triggerPrice, validate) {

	return placeOrderAdvanced(AT_VARIETY_BO, account, exchange, symbol, 
		tradeType, orderType, defaultProductType(), 
		quantity, price, triggerPrice,
		defaultTarget(), defaultStoploss(), defaultTrailingStoploss(),
		defaultDisclosedQuantity(), defaultValidity(), defaultAmo(),
		defaultStrategyId(), defaultComments(), validate);

}

/*****************************************************************************/
/************************ PLACE ORDER FUNCTIONS - END ************************/
/*****************************************************************************/


/*****************************************************************************/
/*********************** MODIFY ORDER FUNCTIONS - START **********************/
/*****************************************************************************/

procedure printOrderModification(account, orderId, orderType, quantity, 
	price, triggerPrice) {
	
	message = "Modification: ";
	message += ("[Account = " + account + "]");
	message += ("[Order Id = " + orderId + "]");
	
	if(orderType != "") {
		message += ("[OrderType = " + orderType + "]");
	}
	
	if(quantity > 0) {
		message += ("[Quantity = " + quantity + "]");
	}
	
	if(price > 0) {
		message += ("[Price = " + price + "]");
	}
	
	if(triggerPrice > 0) {
		message += ("[Trigger Price = " + triggerPrice + "]");
	}
	
	_TRACE(message);	
}

/**
* Modifies the order. Returns True successful modification request;
* otherwise returns False.
* 
* If a parameter is not applicable, then either pass blank (for text parameter) 
* or zero (for numeric parameter).
*/
function modifyOrder(account, orderId, orderType, quantity, price, 
	triggerPrice) {
	priceStr = StrFormat("%.5f", prec(price, AT_PRICE_PRECISION));
	triggerPriceStr = StrFormat("%.5f", 
		prec(triggerPrice, AT_PRICE_PRECISION));
	
	csv = AT_MODIFY_ORDER_CMD		+ AT_COMMA + 
		orderId 										+ AT_COMMA + 
		orderType 									+ AT_COMMA +  
		quantity 									+ AT_COMMA +  
		priceStr 									+ AT_COMMA +  
		triggerPriceStr;
	
	if(AT_DEBUG) {
		_TRACE("Sending order modify request: " + csv);
	}
		
	written = fileWriteLine(COMMANDS_FILE, csv);
	
	if(written) {
		_TRACE("Order modify request sent.");
	} else {
		_TRACE("Order modify request failed.");
	}
	
	printOrderModification(account, orderId, orderType, quantity, price, 
		triggerPrice);
	
	return written;
}

function modifyOrderPrice(account, orderId, price) {
	return modifyOrder(account, orderId, AT_BLANK, 0, price, 0);
}

function modifyOrderQuantity(account, orderId, quantity) {
	return modifyOrder(account, orderId, AT_BLANK, quantity, 0, 0);
}

/*****************************************************************************/
/************************ MODIFY ORDER FUNCTIONS - END ***********************/
/*****************************************************************************/
