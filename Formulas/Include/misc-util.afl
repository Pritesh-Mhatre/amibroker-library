/************************************************
* Miscellaneous utility functions
*
* Author: Stocks Developer
************************************************/

/*
* Functions for static variables which are unique accross symbols and charts.
*/
global amiStaticVarKey;

/*
* Use symbol name and chart id to keep static variable unique.
*/
amiStaticVarKey = Name() + NumToStr(GetChartID(), 1.0, False);

/**
* Stores numeric value in static variable by preparing a unique chart specific key.
*
* Documentation: https://github.com/Pritesh-Mhatre/amibroker-library/wiki/Miscellaneous-Functions#amiStaticVarSet
*/
procedure amiStaticVarSet(key, value)
{
	global amiStaticVarKey;
	StaticVarSet(key + amiStaticVarKey, value);
}

/**
* Retrieves numeric data stored in static variable using a unique chart specific key.
*
* Documentation: https://github.com/Pritesh-Mhatre/amibroker-library/wiki/Miscellaneous-Functions#amiStaticVarGet
*/
function amiStaticVarGet(key)
{
	global amiStaticVarKey;
	if(IsNull(var = StaticVarGet(key + amiStaticVarKey) ) ) { 
		var = 0;
	}
	return var;
}

/**
* Stores text value in static variables by preparing a unique chart specific key.
*
* Documentation: https://github.com/Pritesh-Mhatre/amibroker-library/wiki/Miscellaneous-Functions#amiStaticVarSetText
*/
procedure amiStaticVarSetText(key, value )
{
	global amiStaticVarKey;
	StaticVarSetText(key + amiStaticVarKey, value);
}

/**
* Retrieves numeric data stored in static variable using a unique chart specific key.
*
* Documentation: https://github.com/Pritesh-Mhatre/amibroker-library/wiki/Miscellaneous-Functions#amiStaticVarGetText
*/
function amiStaticVarGetText(key )
{
	global amiStaticVarKey;
	return StaticVarGetText(key + amiStaticVarKey);
}

/*
* Reverses trade type, return BUY for SELL an vice versa.
*/
function reverseTradeType(tradeType) {
	result = "";
	
	if(tradeType == "SELL") {
		result = "BUY";
	}
	if(tradeType == "BUY") {
		result = "SELL";
	}
	if(tradeType == "SHORT") {
		result = "COVER";
	}
	if(tradeType == "COVER") {
		result = "SHORT";
	}
	
	return result;
}